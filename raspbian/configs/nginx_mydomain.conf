

server {
    server_tokens off;
    ## Blocken, wenn Zugriff aus einem nicht erlaubten Land erfolgt ##
    if ($allowed_country = no) {
        return 403;
    }

    # https://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html
    ## Block download agents ##
    if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
    }

    ## Block some robots ##
    if ($http_user_agent ~* msnbot|scrapbot) {
        return 403;
    }

    ## Deny certain Referers ##
    if ( $http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen) )
    {
        return 403;
    }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name DOMAIN_HERE;
    ##
    # SSL
    ##

    ## Activate SSL, setze SERVER Zertifikat Informationen ##
    # Generiert via Let's Encrypt!
    #ssl_certificate /etc/letsencrypt/live/DOMAIN_HERE/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/DOMAIN_HERE/privkey.pem;
    #ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN_HERE/fullchain.pem;
    ssl_session_cache builtin:1000 shared:SSL:60m;
    ssl_prefer_server_ciphers on;
    # unsichere SSL Ciphers deaktivieren!
    ssl_ciphers    HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!RC4;
    ssl_protocols TLSv1.2;
    ssl_session_timeout 60m;
    ssl_session_tickets on;
    ssl_session_ticket_key /etc/nginx/nginx_ticketkey;
    #ssl_buffer_size 16k;   #for throughput, video applications
    ssl_buffer_size 4k;     #for quick first byte delivery

    # Client Zertifikat spezifisch
    #ssl_client_certificate /etc/openvpn/easy-rsa/keys/ca.crt;
    #ssl_crl /etc/openvpn/easy-rsa/keys/ca.crl;
    #ssl_verify_client optional;
    #ssl_dhparam /etc/openvpn/easy-rsa/keys/dh2048.pem;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;


    client_body_buffer_size 8K;
    client_max_body_size 20m;
    client_body_timeout 10s;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 16k;
    client_header_timeout 5s;

    ##
    # global
    ##

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.php;

    # Proxy Caching
    # Skip^1 caching variable init
    set $nocache 0;
    # Bypass^2 caching variable init
    set $purgecache 0;

    # Bypass^2 cache on no-cache (et al.) browser request
    if ($http_cache_control ~ "max-age=0")
        { set $purgecache 1; }
    if ($http_cache_control ~ "no-cache")
        { set $purgecache 1; }
    # Bypass^2 cache with custom header set on request
    if ($http_x_cache_purge ~* "true")
        { set $purgecache 1; }


    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|xml)$ {
        include /etc/nginx/headers.conf;
        expires 7d;
        add_header Cache-Control "public, no-transform";
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;
    }

    # Weiterleitung zu SmartHomeNG (Websocket Schnittstelle) mit Basic Auth
    location / {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: smartVISU2.9";
#        auth_basic_user_file /etc/nginx/.smartvisu;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;

        access_by_lua_file /etc/nginx/scripts/hass_access.lua;

        if ($allowed_country = no) {
            return 403;
        }
        # Nur Websocket Verbindungen gegen "/" durchlassen!
        if ($http_upgrade = websocket) {
                proxy_pass http://websocket;
        }

    }

    # Zugriff auf die smartVISU mit Basic Auth
    location /smartVISU {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: smartVISU2.9";
#        auth_basic_user_file /etc/nginx/.smartvisu;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;

        if ($allowed_country = no) {
            return 403;
        }
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }
        proxy_pass http://sv/smartVISU;
    }

    # Zugriff auf die smartVISU 2.9 mit Basic Auth
    location /smartVISU2.9 {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: smartVISU2.9";
#        auth_basic_user_file /etc/nginx/.smartvisu;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;


        if ($ssl_client_verify != SUCCESS) {
            return 403;
    }

        if ($allowed_country = no) {
            return 403;
        }

        proxy_pass http://sv/smartVISU2.9;
    }

    # Alexa Plugin Weiterleitung
    location /alexa {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: Alexa";
#        auth_basic_user_file /etc/nginx/.alexa;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;

        if ($allowed_country = no) {
            return 403;
        }
        proxy_pass http://alexa;
    }

    # Backend Plugin Weiterleitung
    location /shng {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: Smarthome NG Backend";
#        auth_basic_user_file /etc/nginx/.shng;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;

        if ($allowed_country = no) {
            return 403;
        }
        proxy_pass http://shng;
        rewrite ^/shng/(.*) https://$host:8383$1; break;
        proxy_redirect  http://shng /shng;
        proxy_cookie_path / /shng/;
    }

    location /backend/ {
        include /etc/nginx/headers.conf;
        satisfy any;
        #auth_basic "Restricted Area: Smarthome NG Backend";
        #auth_basic_user_file /etc/nginx/.shng;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;

        if ($allowed_country = no) {
            return 403;
        }
        proxy_pass http://shng;
        rewrite ^/backend/(.*) http://$host:8383$1; break;
        proxy_redirect  http://backend /backend;
        proxy_cookie_path / /backend/;
    }

    # Network Plugin Weiterleitung
    location /shnet {
        include /etc/nginx/headers.conf;
        satisfy any;
#        auth_basic "Restricted Area: Smarthome NG Network";
#        auth_basic_user_file /etc/nginx/.shng;
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/16;
        deny all;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;

        if ($allowed_country = no) {
            return 403;
        }
        proxy_pass http://shnet;
        rewrite ^/shnet/(.*) http://$host:9999$1; break;
        proxy_redirect  http://shnet /shnet;
        proxy_cookie_path / /shnet/;

    }

  # Weiterleitung zu Monit
    location /monit/ {
        satisfy any;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
#        auth_basic "Restricted Area: Monit";
#        auth_basic_user_file /etc/nginx/.monit;
        deny all;
        rewrite ^/monit/(.*) /$1 break;
        proxy_pass   http://monithost;
        proxy_redirect  http://monithost /monit;
        proxy_cookie_path / /monit/;
        include /etc/nginx/headers.conf;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;
    }

  # Weiterleitung zu Monitgraph
    location /monitgraph/ {
        satisfy any;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
#        auth_basic "Restricted Area: Monitgraph";
#        auth_basic_user_file /etc/nginx/.monit;
        deny all;
        proxy_pass   http://mainhost/monitgraph/;
        include /etc/nginx/headers.conf;
        access_by_lua_file /etc/nginx/scripts/hass_access.lua;
    }
}
